# https://docs.docker.com/build/ci/github-actions/multi-platform/
name: Test, build and deploy

on:
  push:
    branches:
      - 'main'
      - 'develop'
      - 'release'

env:
  REGISTRY: docker.io
  DEPLOYMENT_NAME: gisquick.${{ github.ref_name }}
  USER_NAME: ${{ secrets.DOCKERHUB_USERNAME }}
  IMAGE_NAME: gisquick-server
  APP_NAME: backend
  BASE_PATH: .

jobs:
  test:
    if: github.event_name == 'push' && github.event.ref == 'refs/heads/develop'
    env:
      PROJECT_BASEPATH: "${{ github.workspace }}"
      GISQUICK_TEMPLATES_ROOT: "${{ github.workspace }}/templates"
      GISQUICK_MAPSERVER_URL: "http://localhost:8082/qgis-server"

      GISQUICK_PROJECTS_ROOT: "${{ github.workspace }}/mocks/projects"
      GISQUICK_MAP_CACHE_ROOT: "${{ github.workspace }}/cache"
      GISQUICK_THUMBNAILS_ROOT: "${{ github.workspace }}/thumbnails"
      WEB_API_HOST: 0.0.0.0:8002

      POSTGRES_HOST: localhost
      POSTGRES_USER: gisquick
      POSTGRES_DB: gisquick
      POSTGRES_PASSWORD: gisquick
      REDIS_ADDR: localhost:6379

    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.21.x' ]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - uses: adambirds/docker-compose-action@v1.3.0
        with:
          compose-file: "./docker-compose.test.yml"
      - name: Install dependencies
        run: go get ./...
      - name: Test with Go
        run: go test ./internal/server/tests

  build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.USER_NAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=ref,event=branch
            type=sha,format=long

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64
          context: ./${{ env.BASE_PATH }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-push

    steps:
      - name: Checkout k8 repository
        uses: actions/checkout@v4
        with:
          repository: vosatom/mnk-k8s
          token: ${{ secrets.PAT }}
          path: k8s

      - name: Update values.yaml
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.gisquick.env[0]["${{ env.APP_NAME }}"].tag = "sha-'${GITHUB_SHA}'"' ./k8s/manifests/ytt/values/${{ env.DEPLOYMENT_NAME }}.yml

      - name: Push values.yaml
        working-directory: k8s
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git commit -am "manifests/ytt: bump ${{ env.DEPLOYMENT_NAME }}(${{ env.IMAGE_NAME }}) app build image to version ${GITHUB_SHA}"
          git push